#!/usr/bin/python
"""
eclsh:
    ensime config parser
"""
import sexpdata
import pprint
import sys
import user
import itertools

class EnsimeProject():
    def __init__(self, d=None):
        d = d or []
        self.subprojects = []
        def fixk(k): return k.value().strip(':').replace('-', '_')

        for i in xrange(0, len(d), 2):
            k = fixk(d[i])
            v = d[i+1]
            setattr(self, k, v)

        _sb = map(lambda x: self.__class__(x), self.subprojects)
        self.subprojects = dict(map(lambda x: (x.name, x), _sb))
        map(lambda p: p.wire_deps(self.subprojects), self.subprojects.values())

    def wire_deps(self, parents):
        def fixup_refs(refs):
            return map(lambda x: parents[x.strip(':')], refs)
        self.depends_on_modules = fixup_refs(self.depends_on_modules)

    def _cmd_classpath(self):
        return ':'.join(set([self.target] + self.compile_deps \
                            + map(lambda x: x.target, self.depends_on_modules)))

    def _cmd_info(self):
        return { "name": self.name }

if __name__ == "__main__":
    with open(".ensime") as f:
        d = list(sexpdata.load(f))
        e = EnsimeProject(d)

    project = None
    cmd = 'info'
    try: project = sys.argv[1]
    except IndexError: pass

    try: cmd = (sys.argv[2]).replace('_cmd_', '')
    except IndexError: pass

    try:
        e = e.subprojects[project]
    except KeyError:
        pprint.pprint(e.subprojects.keys())

    try:
        pprint.pprint(getattr(e, '_cmd_' + cmd)())
    except AttributeError:
        pprint.pprint('unknown command')
