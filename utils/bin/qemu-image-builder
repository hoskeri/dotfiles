#!/usr/bin/make -f
ROOTCMD := sudo
PREFIX := $(shell pwd)
ORIGIN := debian
CODENAME := unstable
DISTRIBUTION := ${ORIGIN}/${CODENAME}
APT_MIRROR := http://localhost:9999/${ORIGIN}

WORKDIR := ${HOME}/.qemu-image-builder/work

DEST := ${HOME}/.qemu-image-builder/images
GET_RELEASE_CMD := curl -f -s -o /dev/stdout ${APT_MIRROR}/dists/${CODENAME}/InRelease|sha256sum|cut -d' ' -f1
METADATA := ${DEST}/metadata.vars

BOOTSTRAP_DIR := ${WORKDIR}/debootstrap
DEBOOTSTRAP := ${ROOTCMD} /usr/bin/cdebootstrap

KERNEL_VERSION := 4.9.0-2-amd64
EXTRA_PACKAGES := systemd-sysv,ifupdown,initramfs-tools,vim-tiny,udhcpc,inetutils-ping

DEBOOTSTRAP_OPTS := -q --allow-unauthenticated -f minimal --include=linux-image-${KERNEL_VERSION},${EXTRA_PACKAGES}
SSH_AUTHKEYS := ${HOME}/.ssh/id_rsa.pub

EXT4FS_IMAGE := ${WORKDIR}/debootstrap.raw
EFI_IMAGE := ${WORKDIR}/debootstrap.efi
FINAL_IMAGE := ${DEST}/debootstrap.qcow2

build: image clean

metadata-pre:
	@truncate -s0 ${METADATA}
	@echo "RELEASE_PRE :=" $(shell $(GET_RELEASE_CMD)) >> ${METADATA}

metadata-post:
	@echo "RELEASE_POST := " $(shell $(GET_RELEASE_CMD)) >> ${METADATA}
	@stat -L --printf 'DISK_USER := %u\nDISK_INODE := %i\nDISK_MTIME := %Y\nDISK_DEVICE := %D\nDISK_FSIZE := %s\n' ${FINAL_IMAGE} >> ${METADATA}

image: makedirs metadata-pre bootstrap provisioning metadata-post
	@echo " [IMAGE]\t\t${FINAL_IMAGE}"
	@${ROOTCMD} rm -f ${EXT4FS_IMAGE}
	@${ROOTCMD} truncate -s 8g ${EXT4FS_IMAGE}
	@${ROOTCMD} sgdisk -Z -G -n 1:2048:1026048 -t 1:ef00 -N 2 -t 2:8304 ${EXT4FS_IMAGE} 2>/dev/null >/dev/null
	@${ROOTCMD} truncate -s 1g ${EFI_IMAGE}
	@${ROOTCMD} mkfs.fat -F32 -nEFI ${EFI_IMAGE} 2>/dev/null >/dev/null
	@${ROOTCMD} mke2fs -L ROOTFS -t ext4 -D -F -E offset=526385152 -d ${BOOTSTRAP_DIR} ${EXT4FS_IMAGE} 1968635 2>/dev/null >/dev/null
	@${ROOTCMD} qemu-img convert -q -f raw -O qcow2 -T directsync -t directsync ${EXT4FS_IMAGE} ${FINAL_IMAGE}
	@${ROOTCMD} chown $(shell id -u):$(shell id -g) ${FINAL_IMAGE}
	@${ROOTCMD} chmod 444 ${FINAL_IMAGE}
	@${ROOTCMD} rm -f ${EXT4FS_IMAGE}

makedirs:
	@mkdir -p \
		$(DEST)                \
		$(WORKDIR)             \
		$(BOOTSTRAP_DIR)       \

provisioning:
	@echo " [CONFIG]\t\tprovisioning"
	@echo root:root|$(ROOTCMD) chpasswd -R ${BOOTSTRAP_DIR} >/dev/null
	@echo debian $(ROOTCMD) tee ${BOOTSTRAP_DIR}/etc/hostname >/dev/null
	@echo "auto ens3\niface ens3 inet dhcp\n" | $(ROOTCMD) tee ${BOOTSTRAP_DIR}/etc/network/interfaces >/dev/null
	@echo "deb http://httpredir.debian.org/debian unstable main contrib non-free" | $(ROOTCMD) tee ${BOOTSTRAP_DIR}/etc/apt/sources.list >/dev/null
	@$(ROOTCMD) install -d -m 0700 $(BOOTSTRAP_DIR)/root/.ssh >/dev/null
	@cat ${SSH_AUTHKEYS} | $(ROOTCMD) tee ${BOOTSTRAP_DIR}/root/.ssh/authorized_keys >/dev/null
	@$(ROOTCMD) chmod 0600 ${BOOTSTRAP_DIR}/root/.ssh/authorized_keys >/dev/null

clean:
	@echo " [CLEAN]\t\t${WORKDIR}"
	@${ROOTCMD} mountpoint -q ${BOOTSTRAP_DIR} && $(ROOTCMD) umount -R $(BOOTSTRAP_DIR) || true 2>/dev/null
	@rm -rf ${WORKDIR}

bootstrap: makedirs
	@echo " [BOOTSTRAP]\t\t${BOOTSTRAP_DIR}"
	@$(ROOTCMD) mount -t tmpfs none $(BOOTSTRAP_DIR)
	@$(DEBOOTSTRAP) $(DEBOOTSTRAP_OPTS) $(DISTRIBUTION) $(BOOTSTRAP_DIR) $(APT_MIRROR)

.PHONY: clean image bootstrap provisioning makedirs build
.NOTPARALLEL: clean image bootstrap provisioning makedirs build
