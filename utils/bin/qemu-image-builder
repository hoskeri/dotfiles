#!/usr/bin/make -f
ROOTCMD := sudo
PREFIX := $(shell pwd)
DISTRIBUTION := debian/unstable
APT_MIRROR := "http://localhost:9999/debian"
WORKDIR := ${HOME}/tmp/qemu-image-builder-work
BOOTSTRAP_DIR := ${WORKDIR}/debootstrap
DEBOOTSTRAP := ${ROOTCMD} /usr/bin/cdebootstrap
KERNEL_VERSION := 4.8.0-1-amd64
EXTRA_PACKAGES := systemd-sysv,ifupdown
DEBOOTSTRAP_OPTS := --allow-unauthenticated -f minimal --include=linux-image-${KERNEL_VERSION},${EXTRA_PACKAGES}

DEST := $(WORKDIR)/build
SSH_AUTHKEYS := ${HOME}/.ssh/id_rsa.pub

ISOIMAGE_ROOT := $(DEST)/isoroot
SQUASHFS_IMAGE := $(DEST)/debootstrap.squashfs

build: clean squashfs
	@cp -v -f \
		$(BOOTSTRAP_DIR)/boot/vmlinuz-${KERNEL_VERSION} \
		$(BOOTSTRAP_DIR)/boot/initrd.img-${KERNEL_VERSION} \
			$(DEST)
	@chmod +x $(DEST)/run
	@$(ROOTCMD) umount $(BOOTSTRAP_DIR) 2>/dev/null

isoimage: build isolinuxcfg
	@cp -f /usr/lib/ISOLINUX/isolinux.bin \
		     /usr/lib/syslinux/modules/bios/ldlinux.c32 \
				 $(ISOIMAGE_ROOT)/syslinux/
	@cp --link \
		$(DEST)/vmlinuz-${KERNEL_VERSION} \
		$(DEST)/initrd.img-${KERNEL_VERSION} \
			$(ISOIMAGE_ROOT)
	@cp --link $(SQUASHFS_IMAGE) $(ISOIMAGE_ROOT)/live/root.squashfs
	@genisoimage -quiet -r -o $(DEST)/debootstrap.iso \
		-b syslinux/isolinux.bin \
		-c syslinux/boot.cat \
		-no-emul-boot -boot-load-size 4 \
		-boot-info-table $(ISOIMAGE_ROOT)
	@rm -rf $(ISOIMAGE_ROOT)

squashfs: bootstrap overlay-boot launcher ident
	@$(ROOTCMD) mksquashfs $(BOOTSTRAP_DIR) $(DEST)/debootstrap.squashfs -no-progress -noappend
	@chown $(shell id -u):$(shell id -g) $(SQUASHFS_IMAGE)

makedirs:
	@mkdir -p $(DEST)
	@mkdir -p $(WORKDIR)
	@mkdir -p $(BOOTSTRAP_DIR)
	@mkdir -p $(ISOIMAGE_ROOT)/syslinux
	@mkdir -p $(ISOIMAGE_ROOT)/live/

ident:
	@echo root:root|$(ROOTCMD) chpasswd -R ${BOOTSTRAP_DIR} >/dev/null
	@echo debian $(ROOTCMD) tee ${BOOTSTRAP_DIR}/etc/hostname >/dev/null
	@echo "auto ens3\niface ens3 inet dhcp\n" | $(ROOTCMD) tee ${BOOTSTRAP_DIR}/etc/network/interfaces >/dev/null
	@$(ROOTCMD) install -d -m 0700 $(BOOTSTRAP_DIR)/root/.ssh >/dev/null
	@cat ${SSH_AUTHKEYS} | $(ROOTCMD) tee ${BOOTSTRAP_DIR}/root/.ssh/authorized_keys >/dev/null
	@$(ROOTCMD) chmod 0600 ${BOOTSTRAP_DIR}/root/.ssh/authorized_keys >/dev/null

clean:
	@$(ROOTCMD) umount $(BOOTSTRAP_DIR)/proc 2>/dev/null
	@$(ROOTCMD) umount $(BOOTSTRAP_DIR)/sys 2>/dev/null
	@$(ROOTCMD) umount $(BOOTSTRAP_DIR) 2>/dev/null
	@rm -f $(WORKDIR)/deboostrap.squashfs

overlay-boot: overlay overlay-hook
	@$(ROOTCMD) chmod +x $(BOOTSTRAP_DIR)/usr/share/initramfs-tools/hooks/overlay-hook
	@$(ROOTCMD) rm -f $(BOOTSTRAP_DIR)/boot/initrd.img-${KERNEL_VERSION}
	@$(ROOTCMD) chroot $(BOOTSTRAP_DIR) update-initramfs -k ${KERNEL_VERSION} -c

bootstrap: makedirs
	@$(ROOTCMD) mount -t tmpfs none $(BOOTSTRAP_DIR)
	@$(DEBOOTSTRAP) $(DEBOOTSTRAP_OPTS) $(DISTRIBUTION) $(BOOTSTRAP_DIR) $(APT_MIRROR)

overlay-hook:
	@cat <<- EOF|$(ROOTCMD) tee $(BOOTSTRAP_DIR)/usr/share/initramfs-tools/hooks/overlay-hook >/dev/null
	#!/bin/sh -e
	. /usr/share/initramfs-tools/hook-functions
	case "$$1" in
	    prereqs)
				echo ""
				exit 0
	    ;;
	esac
	manual_add_modules iso9660
	manual_add_modules squashfs
	manual_add_modules overlay
	EOF

overlay:
	@cat <<- EOF|$(ROOTCMD) tee $(BOOTSTRAP_DIR)/usr/share/initramfs-tools/scripts/overlay >/dev/null
	mountroot() {
	    modprobe squashfs
	    modprobe overlay
			SQ_DEV=/dev/vda
			if blkid /dev/sr0 2>&1 2>/dev/null
			then
				mkdir -p /cdrom
				modprobe iso9660
				modprobe loop
				mount -t iso9660 /dev/sr0 /cdrom
				losetup /dev/loop0 /cdrom/live/root.squashfs
				SQ_DEV=/dev/loop0
			fi
	    mount -t squashfs \$$SQ_DEV /root
			mkdir -p /overlay
	    mount -t tmpfs -osize=512m none /overlay
	    mkdir -p /overlay/workdir /overlay/upperdir
	    mount -t overlay -olowerdir=/root,upperdir=/overlay/upperdir,workdir=/overlay/workdir live-root /root
	}
	EOF

launcher:
	@cat <<- EOF > $(DEST)/run
	#!/bin/sh
	set -eu
	basedir=\$$(dirname \$$(readlink -f \$$0))
	qemu-system-x86_64 -cpu host -enable-kvm -m 1024 -vga virtio -kernel \\
		\$$basedir/vmlinuz-${KERNEL_VERSION} -initrd \\
		\$$basedir/initrd.img-${KERNEL_VERSION} -append \\
		'rootfstype=squashfs boot=overlay root=/dev/vda quiet' -drive \\
		if=virtio,format=raw,file=\$$basedir/debootstrap.squashfs -net \\
		bridge,br=br0 -net nic,model=virtio
	EOF

isolinuxcfg:
	@cat <<- EOF > ${ISOIMAGE_ROOT}/syslinux/isolinux.cfg
	default Linux
	label Linux
	  kernel /vmlinuz-${KERNEL_VERSION}
	  append initrd=/initrd.img-${KERNEL_VERSION} ro quiet boot=overlay
	EOF

.ONESHELL: overlay overlay-hook launcher isolinuxcfg
