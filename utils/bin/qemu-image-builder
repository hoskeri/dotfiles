#!/usr/bin/make -f
PREFIX := $(shell pwd)
DISTRIBUTION := unstable
APT_MIRROR := "http://localhost:9999/debian"
WORKDIR := ${HOME}/tmp/qemu-image-builder-work
BOOTSTRAP_DIR := ${WORKDIR}/debootstrap
DEBOOTSTRAP := sudo /usr/sbin/debootstrap
KERNEL_VERSION := 4.7.0-1-amd64
EXTRA_PACKAGES := openssh-server,qemu-guest-agent,linux-perf-4.7
DEBOOTSTRAP_OPTS := --no-check-certificate --no-check-gpg --include=linux-image-${KERNEL_VERSION},${EXTRA_PACKAGES}
BOOTIMAGE_SIZE := 1073741824
GPT_SIZE := 1048576
BOOTIMAGE_FS_SIZE := $(shell expr $(BOOTIMAGE_SIZE) - $(GPT_SIZE))

DEST := $(WORKDIR)/build
SSH_AUTHKEYS := ${HOME}/.ssh/id_rsa.pub

build: clean squashfs
	@cp -v -f \
		$(BOOTSTRAP_DIR)/boot/vmlinuz-${KERNEL_VERSION} \
		$(BOOTSTRAP_DIR)/boot/initrd.img-${KERNEL_VERSION} \
			$(DEST)
	@chmod +x $(DEST)/run
	@umount $(BOOTSTRAP_DIR) 2>/dev/null

squashfs: bootstrap overlay-boot launcher ident
	@mksquashfs $(BOOTSTRAP_DIR) $(DEST)/debootstrap.squashfs -no-progress -noappend

bootimage: bootstrap ident
	@truncate -s $(BOOTIMAGE_SIZE) $(DEST)/debootstrap.disk
	@sgdisk -G -N 1 $(DEST)/debootstrap.disk
	@mkfs.ext4 -F -d $(BOOTSTRAP_DIR) -E offset=$(GPT_SIZE) $(DEST)/debootstrap.disk $(BOOTIMAGE_FS_SIZE)

makedirs:
	@mkdir -p $(DEST)
	@mkdir -p $(WORKDIR)
	@mkdir -p $(BOOTSTRAP_DIR)

ident:
	@$(shell echo "root:root"|chpasswd -R ${BOOTSTRAP_DIR})
	@$(shell echo debian > ${BOOTSTRAP_DIR}/etc/hostname)
	@$(shell echo -e "auto ens3\niface ens3 inet dhcp\n"
			> ${BOOTSTRAP_DIR}/etc/network/interfaces.d/ens3.interface)
	@$(shell install -d -m 0700 ${BOOTSTRAP_DIR}/root/.ssh)
	@$(shell cat ${SSH_AUTHKEYS} > ${BOOTSTRAP_DIR}/root/.ssh/authorized_keys)
	@$(shell chmod 0600 ${BOOTSTRAP_DIR}/root/.ssh/authorized_keys)

clean:
	@umount $(BOOTSTRAP_DIR)/proc 2>/dev/null
	@umount $(BOOTSTRAP_DIR)/sys 2>/dev/null
	@umount $(BOOTSTRAP_DIR) 2>/dev/null
	@rm -f $(WORKDIR)/deboostrap.squashfs

overlay-boot: overlay overlay-hook
	@chmod +x $(BOOTSTRAP_DIR)/usr/share/initramfs-tools/hooks/overlay-hook
	@rm -f $(BOOTSTRAP_DIR)/boot/initrd.img-${KERNEL_VERSION}
	@chroot $(BOOTSTRAP_DIR) update-initramfs -k ${KERNEL_VERSION} -c

bootstrap: makedirs
	@mount -t tmpfs none $(BOOTSTRAP_DIR)
	@$(DEBOOTSTRAP) $(DEBOOTSTRAP_OPTS) $(DISTRIBUTION) $(BOOTSTRAP_DIR) $(APT_MIRROR)

overlay-hook:
	@cat <<- EOF > $(BOOTSTRAP_DIR)/usr/share/initramfs-tools/hooks/overlay-hook
	#!/bin/sh -e
	. /usr/share/initramfs-tools/hook-functions
	case "$$1" in
	    prereqs)
				echo ""
				exit 0
	    ;;
	esac
	manual_add_modules squashfs
	manual_add_modules overlay
	EOF

overlay:
	@cat <<- EOF > $(BOOTSTRAP_DIR)/usr/share/initramfs-tools/scripts/overlay
	mountroot() {
	    modprobe squashfs
	    modprobe overlay
	    mount -t squashfs /dev/vda /root
			mkdir -p /overlay
	    mount -t tmpfs -osize=512m none /overlay
	    mkdir -p /overlay/workdir /overlay/upperdir
	    mount -t overlay -olowerdir=/root,upperdir=/overlay/upperdir,workdir=/overlay/workdir live-root /root
	}
	EOF

launcher:
	@cat <<- EOF > $(DEST)/run
	#!/bin/sh
	set -eu
	basedir=\$$(dirname \$$(readlink -f \$$0))
	qemu-system-x86_64 -cpu host -enable-kvm -m 1024 -vga virtio -kernel \\
		\$$basedir/vmlinuz-${KERNEL_VERSION} -initrd \\
		\$$basedir/initrd.img-${KERNEL_VERSION} -append \\
		'rootfstype=squashfs boot=overlay root=/dev/vda quiet' -drive \\
		if=virtio,format=raw,file=\$$basedir/debootstrap.squashfs -net \\
		bridge,br=br0 -net nic,model=virtio
	EOF

.ONESHELL: overlay overlay-hook launcher
